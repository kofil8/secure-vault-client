import { NextRequest, NextResponse } from "next/server";
import axios from "axios";

const IPINFO_API_TOKEN = process.env.IPINFO_API_TOKEN;
const ALLOWED_NORDVPN_IP = process.env.ALLOWED_NORDVPN_IP;
const protectedRoutes = ["/dashboard"];

export async function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;

  const hostname = request.headers.get("host") || "";
  const isLocalhost =
    hostname.startsWith("localhost") || hostname.startsWith("127.0.0.1");

  // âœ… Skip VPN check during local development
  if (isLocalhost) {
    return NextResponse.next();
  }

  const clientIP =
    request.headers.get("x-forwarded-for")?.split(",")[0]?.trim() || "0.0.0.0";

  console.log("Client IP:", clientIP);
  console.log("Allowed IP:", ALLOWED_NORDVPN_IP);

  try {
    const { data } = await axios.get(
      `https://ipinfo.io/${clientIP}?token=${IPINFO_API_TOKEN}`
    );

    const isVPN = data.privacy?.vpn === true;
    const isProxy = data.privacy?.proxy === true;
    const isTor = data.privacy?.tor === true;

    const isAllowedIP = clientIP === ALLOWED_NORDVPN_IP;

    if (!isAllowedIP || isVPN || isProxy || isTor) {
      return new NextResponse("Access denied: Unauthorized IP", {
        status: 403,
      });
    }
  } catch (error) {
    console.error("IP check failed:", error);
    return new NextResponse("Access denied: IP check failed", { status: 403 });
  }

  if (protectedRoutes.some((route) => path.startsWith(route))) {
    const token = request.cookies.get("accessToken")?.value;
    if (!token) {
      return NextResponse.redirect(new URL("/login", request.url));
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/((?!_next|favicon.ico|images|fonts|api/public).*)"],
};


import { NextRequest, NextResponse } from "next/server";
import axios from "axios";

const IPINFO_API_TOKEN = process.env.IPINFO_API_TOKEN;
const ALLOWED_NORDVPN_IP = process.env.ALLOWED_NORDVPN_IP;
const protectedRoutes = ["/dashboard"];

export async function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;

  const clientIP =
    request.headers.get("x-forwarded-for")?.split(",")[0]?.trim() || "0.0.0.0";

  console.log("Client IP:", clientIP);
  console.log("Allowed IP:", ALLOWED_NORDVPN_IP);

  try {
    const { data } = await axios.get(
      `https://ipinfo.io/${clientIP}?token=${IPINFO_API_TOKEN}`
    );

    const isVPN = data.privacy?.vpn === true;
    const isProxy = data.privacy?.proxy === true;
    const isTor = data.privacy?.tor === true;

    const isAllowedIP = clientIP === ALLOWED_NORDVPN_IP;

    if (!isAllowedIP || isVPN || isProxy || isTor) {
      return new NextResponse("Access denied: Unauthorized IP", {
        status: 403,
      });
    }
  } catch (error) {
    console.error("IP check failed:", error);
    return new NextResponse("Access denied: IP check failed", { status: 403 });
  }

  if (protectedRoutes.some((route) => path.startsWith(route))) {
    const token = request.cookies.get("accessToken")?.value;
    if (!token) {
      return NextResponse.redirect(new URL("/login", request.url));
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/((?!_next|favicon.ico|images|fonts|api/public).*)"],
};



  const handleEditInOnlyOffice = async (fileId: string) => {
    try {
      // Call the backend to get the editor config for OnlyOffice
      const response = await fetch(`/api/onlyoffice/config/${fileId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();

      if (data.success) {
        const { callbackUrl, document } = data.data.editorConfig;

        // Open the OnlyOffice editor in a new window or iframe
        const editorWindow = window.open(
          callbackUrl,
          "_blank",
          "width=800, height=600"
        );
        editorWindow?.document.write(`
          <html>
            <head>
              <title>OnlyOffice Editor</title>
            </head>
            <body>
              <iframe src="${document.url}" width="100%" height="100%" style="border: none;"></iframe>
            </body>
          </html>
        `);
      } else {
        toast.error("Failed to load editor config.");
      }
    } catch {
      toast.error("Error opening the file in OnlyOffice.");
    }
  };